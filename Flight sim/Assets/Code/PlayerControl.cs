using System;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour {
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 20f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;


    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;


    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;
#endregion

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start() {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward*3;
    }

    internal void FixedUpdate()
    {
        Steering();
        Thrust();
        Aerodynamics();
    }

    void Steering()
    {
        //var oldRoll = roll;
        //var oldPitch = pitch;
        //var oldYaw = yaw;

        //roll = Input.GetAxis("Horizontal") * RollRange;
        //pitch = Input.GetAxis("Vertical") * PitchRange;
        //yaw = RotationalSpeed * Time.fixedDeltaTime * roll;

        //var lerpRoll = Mathf.Lerp(oldRoll, roll, 0.01f);
        //var lerpPitch = Mathf.Lerp(oldPitch, pitch, 0.01f);
        //var lerpYaw = Mathf.Lerp(oldYaw, yaw, 0.01f);

        //playerRB.MoveRotation(Quaternion.Euler(lerpPitch, lerpYaw, lerpRoll));


        var newRoll = Input.GetAxis("Horizontal") * RollRange;
        var newPitch = Input.GetAxis("Vertical") * PitchRange;
        var newYaw = RotationalSpeed * Time.fixedDeltaTime * newRoll;

        playerRB.MoveRotation(
            Quaternion.Lerp(transform.rotation, Quaternion.Euler(newPitch, newYaw, newRoll), 0.01f));                
    }

    void Thrust()
    {
        float temp = Input.GetAxis("Thrust");
        if (0 <= temp)
            thrust = temp * MaximumThrust; 
        else if (temp < 0)
            thrust = 0;

        playerRB.AddForce(thrust * transform.forward);
    }

    void Aerodynamics()
    {        
        Vector3 x_local = transform.right;
        Vector3 y_local = transform.up;
        Vector3 z_local = transform.forward;

        //lift force
        //Collider[] hitColliders = Physics.OverlapSphere(LayerMask.GetMask());
        Vector3 v_rel = -playerRB.velocity;
        Vector3 v_forward = Vector3.Scale(v_rel, z_local);
        Vector3 f_lift = LiftCoefficient * Vector3.Scale(Vector3.Scale(v_forward, v_forward), y_local);
        playerRB.AddForce(f_lift);

        //foward drag force
        Vector3 sgn_v_forward = new Vector3(Math.Sign(v_forward.x), Math.Sign(v_forward.y), Math.Sign(v_forward.z));
        Vector3 f_fd = ForwardDragCoefficient * 
            Vector3.Scale(sgn_v_forward, Vector3.Scale(Vector3.Scale(v_forward, v_forward), z_local));
        playerRB.AddForce(f_fd);

        //vertical drag force
        Vector3 v_up = Vector3.Scale(v_rel, y_local);
        Vector3 sgn_v_up = new Vector3(Math.Sign(v_up.x), Math.Sign(v_up.y), Math.Sign(v_up.z));
        Vector3 f_vd = VerticalDragCoefficient * 
            Vector3.Scale(sgn_v_up, Vector3.Scale(Vector3.Scale(v_up, v_up), y_local));  
        playerRB.AddForce(f_vd);
    }



    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe) {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe) {
            GameOverText.text = "You Win!";
        } else {
            GameOverText.text = "OOPS";
        }
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }

    private void OnCollisionEnter(Collision collision)
    {
        LandingPlatform landing_p = gameObject.AddComponent(typeof(LandingPlatform)) as LandingPlatform;
        if (collision.gameObject.name == "LandingPlatform")
        {
            if(playerRB.velocity.magnitude <= landing_p.MaxLandingSpeed)
                OnGameOver(true);
            else
                OnGameOver(false);
        }
        else if(collision.gameObject.name == "Target" ||
                collision.gameObject.name == "Target (1)" ||
                collision.gameObject.name == "Target (2)" ||
                collision.gameObject.name == "Updrafts")
        {

        }
        else
        {
            OnGameOver(false);
        }
    }
}
